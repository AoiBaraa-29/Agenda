// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid())
  email              String             @unique
  password           String
  firstName          String
  lastName           String
  middleName         String?
  organizedEvents    Event[]            @relation("OrganizedEvents")
  participatedEvents EventParticipant[]
  EventFeedback      EventFeedback[]
  refreshToken       String?
  EventCommittee     EventCommittee[]

  @@index([email])
}

model Event {
  id                 String             @id @default(uuid())
  title              String
  details            String?
  purpose            String?
  location           String
  startDateTime      DateTime
  endDateTime        DateTime
  estimatedAttendees Int?
  category           EventCategory
  audience           EventAudience      @default(PUBLIC)
  participants       EventParticipant[]
  estimatedExpense   Decimal?
  price              Decimal?           @default(0)
  status             EventStatus?       @default(UPCOMING)
  finance            EventBudget[]
  committee          EventCommittee[]   @relation("Committees")
  EventFeedback      EventFeedback[]    @relation("Feedbacks")
  EventHistoryLogs   EventHistoryLog[]  @relation("HistoryLogs")
  organizerId        String
  organizer          User               @relation("OrganizedEvents", fields: [organizerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizerId])
}

enum EventCategory {
  PERSONAL
  COMMUNITY
  SCHOOL
  WORK
}

enum EventAudience {
  PUBLIC
  INVITED_ONLY
  USER_GROUP
  ONLY_ME
}

enum EventStatus {
  FOR_APPROVAL
  UPCOMING
  DONE
  RESCHEDULED
  CANCELLED
}

model EventCommittee {
  id                    Int                     @id @default(autoincrement())
  userId                String?
  eventId               String
  email                 String
  name                  String?
  EventCommitteeInquiry EventCommitteeInquiry[] @relation("CommitteeInquiries")
  approvalStatus        ApprovalStatus          @default(WAITING)
  user                  User?                   @relation(fields: [userId], references: [id])
  event                 Event                   @relation("Committees", fields: [eventId], references: [id])

  @@unique([email, eventId])
}

enum ApprovalStatus {
  WAITING
  REQUESTING_REVISION
  REJECTED
  APPROVED
}

model EventSentEmailCommittee {
  id             Int      @id @unique @default(autoincrement())
  isSent         Boolean
  committeeEmail String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model EventCommitteeInquiry {
  id               Int            @id @default(autoincrement())
  committeeEmail   String
  committeeEventId String
  committee        EventCommittee @relation("CommitteeInquiries", fields: [committeeEmail, committeeEventId], references: [email, eventId])
  content          String?
  responseType     ResponseType
  date             DateTime       @default(now())
}

enum ResponseType {
  REQUESTING_REVISION
  REJECTED
  APPROVED
}

model EventParticipant {
  id      Int     @id @default(autoincrement())
  userId  String?
  eventId String
  email   String
  name    String?
  user    User?   @relation(fields: [userId], references: [id])
  event   Event   @relation(fields: [eventId], references: [id])

  @@unique([email, eventId])
}

model EventBudget {
  id              Int             @id @default(autoincrement())
  financeCategory FinanceCategory
  taskCategory    String
  taskName        String
  vendor          String
  estimatedCost   Decimal
  actualCost      Decimal?
  eventId         String
  event           Event           @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([taskCategory, eventId])
}

enum FinanceCategory {
  INCOME
  EXPENSE
}

model EventFeedback {
  id      Int      @id @default(autoincrement())
  content String
  rating  Decimal?
  userId  String
  eventId String
  user    User     @relation(fields: [userId], references: [id])
  event   Event    @relation("Feedbacks", fields: [eventId], references: [id])

  @@unique([userId, eventId])
}

model EventHistoryLog {
  id         Int           @id @default(autoincrement())
  eventId    String
  event      Event         @relation("HistoryLogs", fields: [eventId], references: [id])
  email      String
  message    String
  oldValues  String?
  newValues  String?
  action     HistoryAction
  actionTime DateTime      @default(now())
}

enum HistoryAction {
  CREATED
  UPDATED
  INQUIRED
  REJECTED
  APPROVED
  DELETED
}
